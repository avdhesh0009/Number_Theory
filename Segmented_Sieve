#include<bits/stdc++.h>
using namespace std;
// Time complexity of Segmented sieve O(N*log(N))
// 1<=L,R<=10^10
// 1<=R-L<=10^5
vector<int> getprime1toN(int n){
    vector<int>isprime(n+1,true);
    isprime[0]=isprime[1]=false;
    for(int i=2;i*i<=n;i++){
        if(!isprime[i]) continue;
        for(int j=i*i;j<=n;j+=i){
            isprime[j]=false;
        }
    }
    vector<int>v;
    for(int i=0;i<=n;i++){
        if(isprime[i]) v.push_back(i);
    }
    return v;
}
vector<int> segmentedsieve(int l,int r){
    if(l==1) l++;
    vector<int>p=getprime1toN(sqrt(r));
    vector<bool>cp(r-l+1,true);
    for(int i=0;i<p.size();i++){
        int s=(l/p[i])*p[i];
        if(l%p[i]) s+=p[i];
        for(int j=s;j<=r;j+=p[i]){
            cp[j-l]=false;
        }
        if(p[i]==s) cp[s-l]=true;
    }
    vector<int>result;
    for(int i=0;i<r-l+1;i++){
        if(cp[i]) result.push_back(l+i);
    }
    return result;
}
void solve(){
    int l,r;
    cin>>l>>r;
    vector<int>isprime=segmentedsieve(l,r);
    for(int i=0;i<isprime.size();i++){
         cout<<isprime[i]<<" ";
    }
    cout<<endl;
}
int main(){
    int t=1;
    cin>>t;
    for(int i=1;i<=t;i++){
        solve();
    }
   return 0;
}
